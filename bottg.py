import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from functools import wraps
from flask import Flask, request, jsonify
import threading
import logging
from aiohttp import *



logging.basicConfig(level=logging.DEBUG)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Flask
app = Flask(__name__)

@app.route("/")
def index():
    return "Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏
PARTNER_API_URL = "https://api.guruleads.ru/1.0"
PARTNER_ACCESS_TOKEN = "57c24d5675cd17655c1b039b54fbe081"

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8097724924:AAHUQQMdVVHgMC6MdnzUmXBNer5RjptquMk"
WEBHOOK_URL = "https://123user123.pythonanywhere.com/webhook"

PROXY_URL = "http://51.195.137.60:80"

bot = Bot(token=BOT_TOKEN, proxy=PROXY_URL)  # –ü—Ä–æ–∫—Å–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–æ—Ç
dp = Dispatcher(bot)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 851939762

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π")],
        [KeyboardButton(text="üìã –î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton(text="‚úÖ –ú–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
def require_activation(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if user_id not in user_data or not user_data[user_id].get("activated", False):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏
async def call_partner_api(endpoint, method, params=None):
    url = f"{PARTNER_API_URL}/{endpoint}/{method}?access-token={PARTNER_ACCESS_TOKEN}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                return await response.json()
            else:
                error_message = await response.text()
                raise Exception(f"API Error: {error_message}")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏
@app.route("/partner_webhook", methods=["POST"])
def partner_webhook():
    try:
        data = request.json
        if not data:
            return jsonify({"status": "error", "message": "Empty or invalid JSON"}), 400

        logging.info(f"Webhook data received: {data}")

        event = data.get("event")
        if not event:
            return jsonify({"status": "error", "message": "Missing 'event' field"}), 400

        user_id = data.get("user_id")
        reward = data.get("reward", 0)
        task_name = data.get("task_name", "")

        if user_id in user_data:
            user_data[user_id]["balance"] += reward
            user_data[user_id]["tasks"][task_name] = reward

            asyncio.create_task(bot.send_message(
                user_id,
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{task_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {reward}‚ÇΩ."
            ))

            asyncio.create_task(bot.send_message(
                ADMIN_ID,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ '{task_name}' –∏ –ø–æ–ª—É—á–∏–ª {reward}‚ÇΩ."
            ))

        return jsonify({"status": "ok"})

    except Exception as e:
        logging.error(f"Error in /partner_webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"balance": 0, "tasks": {}, "activated": True, "last_task": None, "username": message.from_user.full_name}
    else:
        user_data[user_id]["activated"] = True

    text = (
        "üîΩ <b>–ú–µ–Ω—é</b>\n"
        "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: 4\n"
        "üìç –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: 4\n"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=main_menu)

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "üîë –ü—Ä–æ—Ñ–∏–ª—å")
@require_activation
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    balance = user_data.get(user_id, {}).get("balance", 0)
    text = (
        "üîΩ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        "\n"
        f"–ë–∞–ª–∞–Ω—Å:\nüí≥ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {balance}‚ÇΩ\n"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=main_menu)

# –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π
@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π")
@require_activation
async def search_tasks(message: types.Message):
    text = "üîΩ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>"
    task_buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–¢–° - 500‚ÇΩ", url="https://gl.guruleads.ru/click/33753/2798?erid=LjN8KPUwq")],
            [InlineKeyboardButton(text="–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫ - 600‚ÇΩ", url="https://gl.guruleads.ru/click/33753/1139?erid=LjN8KRohD")],
            [InlineKeyboardButton(text="–í–¢–ë - 600‚ÇΩ", url="https://gl.guruleads.ru/click/33753/1442?erid=LjN8KPvwo")],
            [InlineKeyboardButton(text="–°–æ–≤–∫–æ–º–±–∞–Ω–∫ - 400‚ÇΩ", url="https://gl.guruleads.ru/click/33753/2435?erid=LjN8KBkyv")]
        ]
    )
    await message.answer(text, parse_mode="HTML", reply_markup=task_buttons)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data == "complete_task")
async def complete_task(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    last_task = user_data[user_id].get("last_task")

    if not last_task:
        await callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)
        return

    reward = last_task["reward"]
    user_data[user_id]["balance"] += reward
    user_data[user_id]["tasks"][last_task["name"]] = reward
    user_data[user_id]["last_task"] = None

    admin_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} ({user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ:\n"
        f"{last_task['name']} –Ω–∞ —Å—É–º–º—É {reward}‚ÇΩ."
    )
    await bot.send_message(ADMIN_ID, admin_text)

    await callback_query.answer(f"–ó–∞–¥–∞–Ω–∏–µ '{last_task['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    await callback_query.message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {last_task['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {reward}‚ÇΩ.",
        reply_markup=main_menu
    )

# –ö–æ–º–∞–Ω–¥–∞ /users
@dp.message(Command(commands=['users']))
async def send_users(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for user_id, data in user_data.items():
            text += f"{data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({user_id})\n"
        await message.answer(text if text != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –ö–æ–º–∞–Ω–¥–∞ /tasks
@dp.message(Command(commands=['tasks']))
async def send_tasks(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        text = "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n"
        for user_id, data in user_data.items():
            completed_tasks = data.get("tasks", {})
            for task_name, reward in completed_tasks.items():
                text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({user_id}) –∑–∞–≤–µ—Ä—à–∏–ª {task_name} –Ω–∞ {reward}‚ÇΩ\n"
        await message.answer(text if text != "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n" else "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_update = request.get_json()
        update = types.Update(**json_update)
        asyncio.run(dp.update.update(update))
        return jsonify({"status": "ok"})
    except Exception as e:
        logging.error(f"Error in /webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

async def on_startup():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Telegram (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è aiohttp.ClientSession)
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
        async with session.get("https://api.telegram.org") as response:
            print(await response.text())

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await bot.set_webhook(WEBHOOK_URL)
async def on_shutdown():
    await bot.session.close()
    logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")



if __name__ == "__main__":

    try:
        asyncio.run(on_startup())
        app.run(debug=True, host="0.0.0.0", port=8080, use_reloader=False)
    except KeyboardInterrupt:
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        asyncio.run(on_shutdown())